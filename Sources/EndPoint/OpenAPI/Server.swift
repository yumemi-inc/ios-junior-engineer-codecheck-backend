// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
extension APIProtocol {
    /// Registers each operation handler with the provided transport.
    /// - Parameters:
    ///   - transport: A transport to which to register the operation handlers.
    ///   - serverURL: A URL used to determine the path prefix for registered
    ///   request handlers.
    ///   - configuration: A set of configuration values for the server.
    ///   - middlewares: A list of middlewares to call before the handler.
    public func registerHandlers(
        on transport: ServerTransport,
        serverURL: URL = .defaultOpenAPIServerURL,
        configuration: Configuration = .init(),
        middlewares: [ServerMiddleware] = []
    ) throws {
        let server = UniversalServer(
            serverURL: serverURL,
            handler: self,
            configuration: configuration,
            middlewares: middlewares
        )
        try transport.register(
            { try await server.post_my_fortune(request: $0, metadata: $1) },
            method: .post,
            path: server.apiPathComponentsWithServerPrefix(["my_fortune"]),
            queryItemNames: []
        )
    }
}
fileprivate extension UniversalServer where APIHandler: APIProtocol {
    /// Operation `post-my-fortune` performs `POST` on `/my_fortune`
    ///
    /// - Remark: Generated from the `post-my-fortune` operation.
    func post_my_fortune(request: Request, metadata: ServerRequestMetadata) async throws -> Response
    {
        try await handle(
            request: request,
            with: metadata,
            forOperation: Operations.post_my_fortune.id,
            using: APIHandler.post_my_fortune,
            deserializer: { request, metadata in
                let path: Operations.post_my_fortune.Input.Path = .init()
                let query: Operations.post_my_fortune.Input.Query = .init()
                let headers: Operations.post_my_fortune.Input.Headers = .init(
                    API_Version: try converter.getOptionalHeaderFieldAsText(
                        in: request.headerFields,
                        name: "API-Version",
                        as: Operations.post_my_fortune.Input.Headers.API_VersionPayload.self
                    )
                )
                let cookies: Operations.post_my_fortune.Input.Cookies = .init()
                let body: Operations.post_my_fortune.Input.Body =
                    try converter.getRequiredRequestBodyAsJSON(
                        Components.Schemas.MyFortuneRequest.self,
                        from: request.body,
                        transforming: { value in .json(value) }
                    )
                return Operations.post_my_fortune.Input(
                    path: path,
                    query: query,
                    headers: headers,
                    cookies: cookies,
                    body: body
                )
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response: Response = .init(statusCode: 200)
                    suppressMutabilityWarning(&response)
                    try converter.validateAcceptIfPresent(
                        "application/json",
                        in: request.headerFields
                    )
                    response.body = try converter.setResponseBodyAsJSON(
                        value.body,
                        headerFields: &response.headerFields,
                        transforming: { wrapped in
                            switch wrapped {
                            case let .json(value):
                                return .init(
                                    value: value,
                                    contentType: "application/json; charset=utf-8"
                                )
                            }
                        }
                    )
                    return response
                case let .undocumented(statusCode, _): return .init(statusCode: statusCode)
                }
            }
        )
    }
}
